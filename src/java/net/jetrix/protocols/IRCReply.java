/**
 * Jetrix TetriNET Server
 * Copyright (C) 2001-2004  Emmanuel Bourg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package net.jetrix.protocols;

/**
 * Numeric replies generated by an IRC server in response to a command.
 *
 * @since 0.2
 *
 * @author Emmanuel Bourg
 * @version $Revision$, $Date$
 */
public interface IRCReply {

    /**
     * Used to indicate the nickname parameter supplied to a command is
     * currently unused.
     *
     * <pre>"&lt;nickname&gt; :No such nick/channel"</pre>
     */
    public static final int ERR_NOSUCHNICK = 401;

    /**
     * Used to indicate the server name given currently doesn't exist.
     *
     * <pre>"&lt;server name&gt; :No such server"</pre>
     */
    public static final int ERR_NOSUCHSERVER = 402;

    /**
     * Used to indicate the given channel name is invalid.
     *
     * <pre>"&lt;channel name&gt; :No such channel"</pre>
     */
    public static final int ERR_NOSUCHCHANNEL = 403;

    /**
     * Sent to a user who is either (a) not on a channel which is mode +n or
     * (b) not a chanop (or mode +v) on a channel which has mode +m set and is
     * trying to send a PRIVMSG message to that channel.
     *
     * <pre>"&lt;channel name&gt; :Cannot send to channel"</pre>
     */
    public static final int ERR_CANNOTSENDTOCHAN = 404;

    /**
     * Sent to a user when they have joined the maximum number of allowed
     * channels and they try to join another channel.
     *
     * <pre>"&lt;channel name&gt; :You have joined too many channels"</pre>
     */
    public static final int ERR_TOOMANYCHANNELS = 405;

    /**
     * Returned by WHOWAS to indicate there is no history information for that
     * nickname.
     *
     * <pre>"&lt;nickname&gt; :There was no such nickname"</pre>
     */
    public static final int ERR_WASNOSUCHNICK = 406;

    /**
     * Returned to a client which is attempting to send PRIVMSG/NOTICE using
     * the user@host destination format and for a user@host which has several
     * occurrences.
     *
     * <pre>"&lt;target&gt; :Duplicate recipients. No message delivered"</pre>
     */
    public static final int ERR_TOOMANYTARGETS = 407;

    /**
     * PING or PONG message missing the originator parameter which is required
     * since these commands must work without valid prefixes.
     *
     * <pre>":No origin specified"</pre>
     */
    public static final int ERR_NOORIGIN = 409;

    /**
     * <pre>":No recipient given (&lt;command&gt;)"</pre>
     */
    public static final int ERR_NORECIPIENT = 411;

    /**
     * <pre>":No text to send"</pre>
     */
    public static final int ERR_NOTEXTTOSEND = 412;

    /**
     * <pre>"&lt;mask&gt; :No toplevel domain specified"</pre>
     */
    public static final int ERR_NOTOPLEVEL = 413;

    /**
     * 412 - 414 are returned by PRIVMSG to indicate that the message wasn't
     * delivered for some reason. ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are
     * errors that are returned when an invalid use of "PRIVMSG $&lt;server&gt;"
     * or "PRIVMSG #&lt;host&gt;" is attempted.
     *
     * <pre>"&lt;mask&gt; :Wildcard in toplevel domain"</pre>
     */
    public static final int ERR_WILDTOPLEVEL = 414;

    /**
     * Returned to a registered client to indicate that the command sent is
     * unknown by the server.
     *
     * <pre>"&lt;command&gt; :Unknown command"</pre>
     */
    public static final int ERR_UNKNOWNCOMMAND = 421;

    /**
     * Server's MOTD file could not be opened by the server.
     *
     * <pre>":MOTD File is missing"</pre>
     */
    public static final int ERR_NOMOTD = 422;

    /**
     * Returned by a server in response to an ADMIN message when there is an
     * error in finding the appropriate information.
     *
     * <pre>"&lt;server&gt; :No administrative info available"</pre>
     */
    public static final int ERR_NOADMININFO = 423;

    /**
     * Generic error message used to report a failed file operation during the
     * processing of a message.
     *
     * <pre>":File error doing &lt;file op&gt; on &lt;file&gt;"</pre>
     */
    public static final int ERR_FILEERROR = 424;

    /**
     * Returned when a nickname parameter expected for a command and isn't
     * found.
     *
     * <pre>":No nickname given"</pre>
     */
    public static final int ERR_NONICKNAMEGIVEN = 431;

    /**
     * Returned after receiving a NICK message which contains characters which
     * do not fall in the defined set. See section x.x.x for details on valid
     * nicknames.
     *
     * <pre>"&lt;nick&gt; :Erroneus nickname"</pre>
     */
    public static final int ERR_ERRONEUSNICKNAME = 432;

    /**
     * Returned when a NICK message is processed that results in an attempt to
     * change to a currently existing nickname.
     *
     * <pre>"&lt;nick&gt; :Nickname is already in use"</pre>
     */
    public static final int ERR_NICKNAMEINUSE = 433;

    /**
     * Returned by a server to a client when it detects a nickname collision
     * (registered of a NICK that already exists by another server).
     *
     * <pre>"&lt;nick&gt; :Nickname collision KILL"</pre>
     */
    public static final int ERR_NICKCOLLISION = 436;

    /**
     * Returned by the server to indicate that the target user of the command
     * is not on the given channel.
     *
     * <pre>"&lt;nick&gt; &lt;channel&gt; :They aren't on that channel"</pre>
     */
    public static final int ERR_USERNOTINCHANNEL = 441;

    /**
     * Returned by the server whenever a client tries to perform a channel
     * effecting command for which the client isn't a member.
     *
     * <pre>"&lt;channel&gt; :You're not on that channel"</pre>
     */
    public static final int ERR_NOTONCHANNEL = 442;

    /**
     * Returned when a client tries to invite a user to a channel they are
     * already on.
     *
     * <pre>"&lt;user&gt; &lt;channel&gt; :is already on channel"</pre>
     */
    public static final int ERR_USERONCHANNEL = 443;

    /**
     * Returned by the summon after a SUMMON command for a user was unable to
     * be performed since they were not logged in.
     *
     * <pre>"&lt;user&gt; :User not logged in"</pre>
     */
    public static final int ERR_NOLOGIN = 444;

    /**
     * Returned as a response to the SUMMON command. Must be returned by any
     * server which does not implement it.
     *
     * <pre>":SUMMON has been disabled"</pre>
     */
    public static final int ERR_SUMMONDISABLED = 445;

    /**
     * Returned as a response to the USERS command. Must be returned by any
     * server which does not implement it.
     *
     * <pre>":USERS has been disabled"</pre>
     */
    public static final int ERR_USERSDISABLED = 446;

    /**
     * Returned by the server to indicate that the client must be registered
     * before the server will allow it to be parsed in detail.
     *
     * <pre>":You have not registered"</pre>
     */
    public static final int ERR_NOTREGISTERED = 451;

    /**
     * Returned by the server by numerous commands to indicate to the client
     * that it didn't supply enough parameters.
     *
     * <pre>"&lt;command&gt; :Not enough parameters"</pre>
     */
    public static final int ERR_NEEDMOREPARAMS = 461;

    /**
     * Returned by the server to any link which tries to change part of the
     * registered details (such as password or user details from second USER
     * message).
     *
     * <pre>":You may not reregister"</pre>
     */
    public static final int ERR_ALREADYREGISTRED = 462;

    /**
     * Returned to a client which attempts to register with a server which does
     * not been setup to allow connections from the host the attempted
     * connection is tried.
     *
     * <pre>":Your host isn't among the privileged"</pre>
     */
    public static final int ERR_NOPERMFORHOST = 463;

    /**
     * Returned to indicate a failed attempt at registering a connection for
     * which a password was required and was either not given or incorrect.
     *
     * <pre>":Password incorrect"</pre>
     */
    public static final int ERR_PASSWDMISMATCH = 464;

    /**
     * Returned after an attempt to connect and register yourself with a server
     * which has been setup to explicitly deny connections to you.
     *
     * <pre>":You are banned from this server"</pre>
     */
    public static final int ERR_YOUREBANNEDCREEP = 465;

    /**
     * <pre>"&lt;channel&gt; :Channel key already set"</pre>
     */
    public static final int ERR_KEYSET = 467;

    /**
     * <pre>"&lt;channel&gt; :Cannot join channel (+l)"</pre>
     */
    public static final int ERR_CHANNELISFULL = 471;

    /**
     * <pre>"&lt;char&gt; :is unknown mode char to me"</pre>
     */
    public static final int ERR_UNKNOWNMODE = 472;

    /**
     * <pre>"&lt;channel&gt; :Cannot join channel (+i)"</pre>
     */
    public static final int ERR_INVITEONLYCHAN = 473;

    /**
     * <pre>"&lt;channel&gt; :Cannot join channel (+b)"</pre>
     */
    public static final int ERR_BANNEDFROMCHAN = 474;

    /**
     * <pre>"&lt;channel&gt; :Cannot join channel (+k)"</pre>
     */
    public static final int ERR_BADCHANNELKEY = 475;

    /**
     * Any command requiring operator privileges to operate must return this
     * error to indicate the attempt was unsuccessful.
     *
     * <pre>":Permission Denied- You're not an IRC operator"</pre>
     */
    public static final int ERR_NOPRIVILEGES = 481;

    /**
     * Any command requiring 'chanop' privileges (such as MODE messages) must
     * return this error if the client making the attempt is not a chanop on
     * the specified channel.
     *
     * <pre>"&lt;channel&gt; :You're not channel operator"</pre>
     */
    public static final int ERR_CHANOPRIVSNEEDED = 482;

    /**
     * Any attempts to use the KILL command on a server are to be refused and
     * this error returned directly to the client.
     *
     * <pre>":You cant kill a server!"</pre>
     */
    public static final int ERR_CANTKILLSERVER = 483;

    /**
     * If a client sends an OPER message and the server has not been configured
     * to allow connections from the client's host as an operator, this error
     * must be returned.
     *
     * <pre>":No O-lines for your host"</pre>
     */
    public static final int ERR_NOOPERHOST = 491;

    /**
     * Returned by the server to indicate that a MODE message was sent with
     * a nickname parameter and that the a mode flag sent was not recognized.
     *
     * <pre>":Unknown MODE flag"</pre>
     */
    public static final int ERR_UMODEUNKNOWNFLAG = 501;

    /**
     * Error sent to any user trying to view or change the user mode for
     * a user other than themselves.
     *
     * <pre>":Cant change mode for other users"</pre>
     */
    public static final int ERR_USERSDONTMATCH = 502;

    /**
     * Dummy reply number. Not used.
     */
    public static final int RPL_NONE = 300;

    /**
     * Reply format used by USERHOST to list replies to the query list. The
     * reply string is composed as follows:
     *
     * <pre>&lt;reply&gt; ::= &lt;nick&gt;['*'] '=' &lt;'+'|'-'&gt;&lt;hostname&gt;</pre>
     *
     * The '*' indicates whether the client has registered as an Operator.
     * The '-' or '+' characters represent whether the client has set an AWAY
     * message or not respectively.
     *
     * <pre>":[&lt;reply&gt;{&lt;space&gt;&lt;reply&gt;}]"</pre>
     */
    public static final int RPL_USERHOST = 302;

    /**
     * Reply format used by ISON to list replies to the query list.
     *
     * <pre>":[&lt;nick&gt; {&lt;space&gt;&lt;nick&gt;}]"</pre>
     */
    public static final int RPL_ISON = 303;

    /**
     * <pre>"&lt;nick&gt; :&lt;away message&gt;"</pre>
     */
    public static final int RPL_AWAY = 301;

    /**
     * <pre>":You are no longer marked as being away"</pre>
     */
    public static final int RPL_UNAWAY = 305;

    /**
     * These replies are used with the AWAY command (if allowed). RPL_AWAY is
     * sent to any client sending a PRIVMSG to a client which is away.
     * RPL_AWAY is only sent by the server to which the client is connected.
     * Replies RPL_UNAWAY and RPL_NOWAWAY are sent when the client removes and
     * sets an AWAY message.
     *
     * <pre>":You have been marked as being away"</pre>
     */
    public static final int RPL_NOWAWAY = 306;

    /**
     * <pre>"&lt;nick&gt; &lt;user&gt; &lt;host&gt; * :&lt;real name&gt;"</pre>
     */
    public static final int RPL_WHOISUSER = 311;

    /**
     * <pre>"&lt;nick&gt; &lt;server&gt; :&lt;server info&gt;"</pre>
     */
    public static final int RPL_WHOISSERVER = 312;

    /**
     * <pre>"&lt;nick&gt; :is an IRC operator"</pre>
     */
    public static final int RPL_WHOISOPERATOR = 313;

    /**
     * <pre>"&lt;nick&gt; &lt;integer&gt; :seconds idle"</pre>
     */
    public static final int RPL_WHOISIDLE = 317;

    /**
     * <pre>"&lt;nick&gt; :End of /WHOIS list"</pre>
     */
    public static final int RPL_ENDOFWHOIS = 318;

    /**
     * Replies 311 - 313, 317 - 319 are all replies generated in response to a
     * WHOIS message. Given that there are enough parameters present, the
     * answering server must either formulate a reply out of the above numerics
     * (if the query nick is found) or return an error reply. The '*' in
     * RPL_WHOISUSER is there as the literal character and not as a wild card.
     * For each reply set, only RPL_WHOISCHANNELS may appear more than once
     * (for long lists of channel names). The '@' and '+' characters next to
     * the channel name indicate whether a client is a channel operator or has
     * been granted permission to speak on a moderated channel.
     * The RPL_ENDOFWHOIS reply is used to mark the end of processing a WHOIS
     * message.
     *
     * <pre>"&lt;nick&gt; :{[@|+]&lt;channel&gt;&lt;space&gt;}"</pre>
     */
    public static final int RPL_WHOISCHANNELS = 319;

    /**
     * <pre>"&lt;nick&gt; &lt;user&gt; &lt;host&gt; * :&lt;real name&gt;"</pre>
     */
    public static final int RPL_WHOWASUSER = 314;

    /**
     * When replying to a WHOWAS message, a server must use the replies
     * RPL_WHOWASUSER, RPL_WHOISSERVER or ERR_WASNOSUCHNICK for each nickname
     * in the presented list. At the end of all reply batches, there must be
     * RPL_ENDOFWHOWAS (even if there was only one reply and it was an error).
     *
     * <pre>"&lt;nick&gt; :End of WHOWAS"</pre>
     */
    public static final int RPL_ENDOFWHOWAS = 369;

    /**
     * <pre>"Channel :Users Name"</pre>
     */
    public static final int RPL_LISTSTART = 321;

    /**
     * <pre>"&lt;channel&gt; &lt;# visible&gt; :&lt;topic&gt;"</pre>
     */
    public static final int RPL_LIST = 322;

    /**
     * Replies RPL_LISTSTART, RPL_LIST, RPL_LISTEND mark the start, actual
     * replies with data and end of the server's response to a LIST command. If
     * there are no channels available to return, only the start and end reply
     * must be sent.
     *
     * <pre>":End of /LIST"</pre>
     */
    public static final int RPL_LISTEND = 323;

    /**
     * <pre>"&lt;channel&gt; &lt;mode&gt; &lt;mode params&gt;"</pre>
     */
    public static final int RPL_CHANNELMODEIS = 324;

    /**
     * <pre>"&lt;channel&gt; :No topic is set"</pre>
     */
    public static final int RPL_NOTOPIC = 331;

    /**
     * When sending a TOPIC message to determine the channel topic, one of two
     * replies is sent. If the topic is set, RPL_TOPIC is sent back else
     * RPL_NOTOPIC.
     *
     * <pre>"&lt;channel&gt; :&lt;topic&gt;"</pre>
     */
    public static final int RPL_TOPIC = 332;

    /**
     * Returned by the server to indicate that the attempted INVITE message was
     * successful and is being passed onto the end client.
     *
     * <pre>"&lt;channel&gt; &lt;nick&gt;"</pre>
     */
    public static final int RPL_INVITING = 341;

    /**
     * Returned by a server answering a SUMMON message to indicate that it is
     * summoning that user.
     *
     * <pre>"&lt;user&gt; :Summoning user to IRC"</pre>
     */
    public static final int RPL_SUMMONING = 342;

    /**
     * Reply by the server showing its version details. The &lt;version&gt; is
     * the version of the software being used (including any patchlevel
     * revisions) and the &lt;debuglevel&gt; is used to indicate if the server
     * is running in "debug mode". The "comments" field may contain any
     * comments about the version or further version details.
     *
     * <pre>"&lt;version&gt;.&lt;debuglevel&gt; &lt;server&gt; :&lt;comments&gt;"</pre>
     */
    public static final int RPL_VERSION = 351;

    /**
     * <pre>"&lt;channel&gt; &lt;user&gt; &lt;host&gt; &lt;server&gt; &lt;nick&gt; &lt;H|G&gt;[*][@|+] :&lt;hopcount&gt; &lt;real name&gt;"</pre>
     */
    public static final int RPL_WHOREPLY = 352;

    /**
     * The RPL_WHOREPLY and RPL_ENDOFWHO pair are used to answer a WHO message.
     * The RPL_WHOREPLY is only sent if there is an appropriate match to the
     * WHO query. If there is a list of parameters supplied with a WHO message,
     * a RPL_ENDOFWHO must be sent after processing each list item with
     * &lt;name&gt; being the item.
     *
     * <pre>"&lt;name&gt; :End of /WHO list"</pre>
     */
    public static final int RPL_ENDOFWHO = 315;

    /**
     * <pre>"&lt;channel&gt; :[[@|+]&lt;nick&gt; [[@|+]&lt;nick&gt; [...]]]"</pre>
     */
    public static final int RPL_NAMREPLY = 353;

    /**
     * To reply to a NAMES message, a reply pair consisting of RPL_NAMREPLY and
     * RPL_ENDOFNAMES is sent by the server back to the client. If there is no
     * channel found as in the query, then only RPL_ENDOFNAMES is returned. The
     * exception to this is when a NAMES message is sent with no parameters and
     * all visible channels and contents are sent back in a series of
     * RPL_NAMEREPLY messages with a RPL_ENDOFNAMES to mark the end.
     *
     * <pre>"&lt;channel&gt; :End of /NAMES list"</pre>
     */
    public static final int RPL_ENDOFNAMES = 366;

    /**
     * <pre>"&lt;mask&gt; &lt;server&gt; :&lt;hopcount&gt; &lt;server info&gt;"</pre>
     */
    public static final int RPL_LINKS = 364;

    /**
     * In replying to the LINKS message, a server must send replies back using
     * the RPL_LINKS numeric and mark the end of the list using an
     * RPL_ENDOFLINKS reply.v
     *
     * <pre>"&lt;mask&gt; :End of /LINKS list"</pre>
     */
    public static final int RPL_ENDOFLINKS = 365;

    /**
     * <pre>"&lt;channel&gt; &lt;banid&gt;"</pre>
     */
    public static final int RPL_BANLIST = 367;

    /**
     * When listing the active 'bans' for a given channel, a server is required
     * to send the list back using the RPL_BANLIST and RPL_ENDOFBANLIST
     * messages. A separate RPL_BANLIST is sent for each active banid. After
     * the banids have been listed (or if none present) a RPL_ENDOFBANLIST must
     * be sent.
     *
     * <pre>"&lt;channel&gt; :End of channel ban list"</pre>
     */
    public static final int RPL_ENDOFBANLIST = 368;

    /**
     * <pre>":&lt;string&gt;"</pre>
     */
    public static final int RPL_INFO = 371;

    /**
     * A server responding to an INFO message is required to send all its
     * 'info' in a series of RPL_INFO messages with a RPL_ENDOFINFO reply to
     * indicate the end of the replies.
     *
     * <pre>":End of /INFO list"</pre>
     */
    public static final int RPL_ENDOFINFO = 374;

    /**
     * <pre>":- &lt;server&gt; Message of the day - "</pre>
     */
    public static final int RPL_MOTDSTART = 375;

    /**
     * <pre>":- &lt;text&gt;"</pre>
     */
    public static final int RPL_MOTD = 372;

    /**
     * When responding to the MOTD message and the MOTD file is found, the file
     * is displayed line by line, with each line no longer than 80 characters,
     * using RPL_MOTD format replies. These should be surrounded by a
     * RPL_MOTDSTART (before the RPL_MOTDs) and an RPL_ENDOFMOTD (after).
     *
     * <pre>":End of /MOTD command"</pre>
     */
    public static final int RPL_ENDOFMOTD = 376;

    /**
     * RPL_YOUREOPER is sent back to a client which has just successfully
     * issued an OPER message and gained operator status.
     *
     * <pre>":You are now an IRC operator"</pre>
     */
    public static final int RPL_YOUREOPER = 381;

    /**
     * If the REHASH option is used and an operator sends a REHASH message,
     * an RPL_REHASHING is sent back to the operator.
     *
     * <pre>"&lt;config file&gt; :Rehashing"</pre>
     */
    public static final int RPL_REHASHING = 382;

    /**
     * When replying to the TIME message, a server must send the reply using
     * the RPL_TIME format above. The string showing the time need only contain
     * the correct day and time there. There is no further requirement for the
     * time string.
     *
     * <pre>"&lt;server&gt; :&lt;string showing server's local time&gt;"</pre>
     */
    public static final int RPL_TIME = 391;

    /**
     * <pre>":UserID Terminal Host"</pre>
     */
    public static final int RPL_USERSSTART = 392;

    /**
     * <pre>":%-8s %-9s %-8s"</pre>
     */
    public static final int RPL_USERS = 393;

    /**
     * <pre>":End of users"</pre>
     */
    public static final int RPL_ENDOFUSERS = 394;

    /**
     * If the USERS message is handled by a server, the replies RPL_USERSTART,
     * RPL_USERS, RPL_ENDOFUSERS and RPL_NOUSERS are used. RPL_USERSSTART must
     * be sent first, following by either a sequence of RPL_USERS or a single
     * RPL_NOUSER. Following this is RPL_ENDOFUSERS.
     *
     * <pre>":Nobody logged in"</pre>
     */
    public static final int RPL_NOUSERS = 395;

    /**
     * <pre>"Link &lt;version & debug level&gt; &lt;destination&gt; &lt;next server&gt;"</pre>
     */
    public static final int RPL_TRACELINK = 200;

    /**
     * <pre>"Try. &lt;class&gt; &lt;server&gt;"</pre>
     */
    public static final int RPL_TRACECONNECTING = 201;

    /**
     * <pre>"H.S. &lt;class&gt; &lt;server&gt;"</pre>
     */
    public static final int RPL_TRACEHANDSHAKE = 202;

    /**
     * <pre>"???? &lt;class&gt; [&lt;client IP address in dot form&gt;]"</pre>
     */
    public static final int RPL_TRACEUNKNOWN = 203;

    /**
     * <pre>"Oper &lt;class&gt; &lt;nick&gt;"</pre>
     */
    public static final int RPL_TRACEOPERATOR = 204;

    /**
     * <pre>"User &lt;class&gt; &lt;nick&gt;"</pre>
     */
    public static final int RPL_TRACEUSER = 205;

    /**
     * <pre>"Serv &lt;class&gt; &lt;int&gt;S &lt;int&gt;C &lt;server&gt; &lt;nick!user|*!*&gt;@&lt;host|server&gt;"</pre>
     */
    public static final int RPL_TRACESERVER = 206;

    /**
     * <pre>"&lt;newtype&gt; 0 &lt;client name&gt;"</pre>
     */
    public static final int RPL_TRACENEWTYPE = 208;

    /**
     * The RPL_TRACE* are all returned by the server in response to the TRACE
     * message. How many are returned is dependent on the the TRACE message
     * and whether it was sent by an operator or not. There is no predefined
     * order for which occurs first. Replies RPL_TRACEUNKNOWN,
     * RPL_TRACECONNECTING and RPL_TRACEHANDSHAKE are all used for connections
     * which have not been fully established and are either unknown, still
     * attempting to connect or in the process of completing the 'server
     * handshake'. RPL_TRACELINK is sent by any server which handles a TRACE
     * message and has to pass it on to another server. The list of
     * RPL_TRACELINKs sent in response to a TRACE command traversing the IRC
     * network should reflect the actual connectivity of the servers themselves
     * along that path. RPL_TRACENEWTYPE is to be used for any connection which
     * does not fit in the other categories but is being displayed anyway.
     *
     * <pre>"File &lt;logfile&gt; &lt;debug level&gt;"</pre>
     */
    public static final int RPL_TRACELOG = 261;

    /**
     * <pre>"&lt;linkname&gt; &lt;sendq&gt; &lt;sent messages&gt; &lt;sent bytes&gt; &lt;received messages&gt; &lt;received bytes&gt; &lt;time open&gt;"</pre>
     */
    public static final int RPL_STATSLINKINFO = 211;

    /**
     * <pre>"&lt;command&gt; &lt;count&gt;"</pre>
     */
    public static final int RPL_STATSCOMMANDS = 212;

    /**
     * <pre>"C &lt;host&gt; * &lt;name&gt; &lt;port&gt; &lt;class&gt;"</pre>
     */
    public static final int RPL_STATSCLINE = 213;

    /**
     * <pre>"N &lt;host&gt; * &lt;name&gt; &lt;port&gt; &lt;class&gt;"</pre>
     */
    public static final int RPL_STATSNLINE = 214;

    /**
     * <pre>"I &lt;host&gt; * &lt;host&gt; &lt;port&gt; &lt;class&gt;"</pre>
     */
    public static final int RPL_STATSILINE = 215;

    /**
     * <pre>"K &lt;host&gt; * &lt;username&gt; &lt;port&gt; &lt;class&gt;"</pre>
     */
    public static final int RPL_STATSKLINE = 216;

    /**
     * <pre>"Y &lt;class&gt; &lt;ping frequency&gt; &lt;connect frequency&gt; &lt;max sendq&gt;"</pre>
     */
    public static final int RPL_STATSYLINE = 218;

    /**
     * <pre>"&lt;stats letter&gt; :End of /STATS report"</pre>
     */
    public static final int RPL_ENDOFSTATS = 219;

    /**
     * <pre>"L &lt;hostmask&gt; * &lt;servername&gt; &lt;maxdepth&gt;"</pre>
     */
    public static final int RPL_STATSLLINE = 241;

    /**
     * <pre>":Server Up %d days %d:%02d:%02d"</pre>
     */
    public static final int RPL_STATSUPTIME = 242;

    /**
     * <pre>"O &lt;hostmask&gt; * &lt;name&gt;"</pre>
     */
    public static final int RPL_STATSOLINE = 243;

    /**
     * <pre>"H &lt;hostmask&gt; * &lt;servername&gt;"</pre>
     */
    public static final int RPL_STATSHLINE = 244;

    /**
     * To answer a query about a client's own mode, RPL_UMODEIS is sent back.
     * <pre>"&lt;user mode string&gt;"</pre>
     */
    public static final int RPL_UMODEIS = 221;

    /**
     * <pre>":There are &lt;integer&gt; users and &lt;integer&gt; invisible on &lt;integer&gt; servers"</pre>
     */
    public static final int RPL_LUSERCLIENT = 251;

    /**
     * <pre>"&lt;integer&gt; :operator(s) online"</pre>
     */
    public static final int RPL_LUSEROP = 252;

    /**
     * <pre>"&lt;integer&gt; :unknown connection(s)"</pre>
     */
    public static final int RPL_LUSERUNKNOWN = 253;

    /**
     * <pre>"&lt;integer&gt; :channels formed"</pre>
     */
    public static final int RPL_LUSERCHANNELS = 254;

    /**
     * In processing an LUSERS message, the server sends a set of replies from
     * RPL_LUSERCLIENT, RPL_LUSEROP, RPL_USERUNKNOWN, RPL_LUSERCHANNELS and
     * RPL_LUSERME. When replying, a server must send back RPL_LUSERCLIENT and
     * RPL_LUSERME. The other replies are only sent back if a non-zero count is
     * found for them.
     *
     * <pre>":I have &lt;integer&gt; clients and &lt;integer&gt; servers"</pre>
     */
    public static final int RPL_LUSERME = 255;

    /**
     * <pre>"&lt;server&gt; :Administrative info"</pre>
     */
    public static final int RPL_ADMINME = 256;

    /**
     * <pre>":&lt;admin info&gt;"</pre>
     */
    public static final int RPL_ADMINLOC1 = 257;

    /**
     * <pre>":&lt;admin info&gt;"</pre>
     */
    public static final int RPL_ADMINLOC2 = 258;

    /**
     * When replying to an ADMIN message, a server is expected to use replies
     * RLP_ADMINME through to RPL_ADMINEMAIL and provide a text message with
     * each. For RPL_ADMINLOC1 a description of what city, state and country
     * the server is in is expected, followed by details of the university and
     * department (RPL_ADMINLOC2) and finally the administrative contact for
     * the server (an email address here is required) in RPL_ADMINEMAIL.
     *
     * <pre>":&lt;admin info&gt;"</pre>
     */
    public static final int RPL_ADMINEMAIL = 259;

}
