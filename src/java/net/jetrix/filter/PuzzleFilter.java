/**
 * Jetrix TetriNET Server
 * Copyright (C) 2004-2005  Emmanuel Bourg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package net.jetrix.filter;

import java.util.*;

import net.jetrix.*;
import net.jetrix.config.*;
import net.jetrix.messages.channel.*;

/**
 * Set the game field and settings when the game starts. A new puzzle is
 * displayed every time. The sequence of puzzles is generated by a
 * {@link PuzzleGenerator}, by default the {@link DownstackPuzzleGenerator}
 * is used. An alternative generator can be used by specifying the <tt>generator</tt>
 * parameter in the filter configuration. The filter configuration is passed
 * to the generator for its initialization.
 *
 * @since 0.3
 *
 * @author Emmanuel Bourg
 * @version $Revision$, $Date$
 */
public class PuzzleFilter extends GenericFilter
{
    private static final String DEFAULT_GENERATOR = DownstackPuzzleGenerator.class.getName();

    private PuzzleGenerator generator;

    public void init()
    {
        try
        {
            generator = (PuzzleGenerator) Class.forName(getConfig().getString("generator", DEFAULT_GENERATOR)).newInstance();
        }
        catch (Exception e)
        {
            generator = new DownstackPuzzleGenerator();
        }

        // initialize the generator
        generator.init(getConfig());
    }

    public void onMessage(NewGameMessage m, List<Message> out)
    {
        // get the next puzzle
        Puzzle puzzle = generator.getNextPuzzle();

        // send the puzzle description
        PlineMessage description = new PlineMessage();
        description.setKey("filter.puzzle.announce", puzzle.getKey(), puzzle.getName(), puzzle.getAuthor());
        out.add(description);

        // update the game settings and the channel settings
        if (puzzle.getSettings() != null)
        {
            m.setSettings(puzzle.getSettings());
            getChannel().getConfig().setSettings(puzzle.getSettings());
        }

        // forward the new game message
        out.add(m);

        // update the field of the first slot
        FieldMessage fieldMessage = new FieldMessage();
        fieldMessage.setSlot(1);
        fieldMessage.setField(puzzle.getField().getFieldString());

        out.add(fieldMessage);
    }

    public void onMessage(FieldMessage m, List<Message> out)
    {
        // check the height of the new field
        Field field = getChannel().getField(0);

        if (field.getHighest() <= 2)
        {
            // stop the game
            getChannel().send(new EndGameMessage());

            // send the congratulation message
            PlineMessage grats = new PlineMessage();
            grats.setKey("filter.puzzle.cleared");
            getChannel().send(grats);
        }

        // forward the field update
        out.add(m);
    }
}
